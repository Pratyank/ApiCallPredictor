version: '3.8'

services:
  # OpenSesame Predictor FastAPI Application
  opensesame-predictor:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: opensesame-predictor
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      # Application Configuration
      - OPENSESAME_ENVIRONMENT=production
      - OPENSESAME_DEBUG=false
      - OPENSESAME_API_HOST=0.0.0.0
      - OPENSESAME_API_PORT=8000
      
      # Database Configuration (Phase 3 uses data/cache.db)
      - OPENSESAME_DATABASE_URL=sqlite:///./data/cache.db
      
      # Cache Configuration
      - OPENSESAME_CACHE_TTL_SECONDS=3600
      - OPENSESAME_OPENAPI_CACHE_TTL=3600
      
      # ML Model Configuration (Phase 3)
      - OPENSESAME_MAX_MODEL_MEMORY_MB=1024
      - OPENSESAME_PREDICTION_TIMEOUT_SECONDS=60
      - TRANSFORMERS_CACHE=/app/.cache/huggingface
      - SENTENCE_TRANSFORMERS_HOME=/app/.cache/sentence_transformers
      
      # LLM Configuration (placeholder values)
      - OPENSESAME_LLM_PROVIDER=placeholder
      - OPENSESAME_LLM_MODEL=gpt-3.5-turbo
      - OPENSESAME_LLM_MAX_TOKENS=1000
      
      # Security Configuration
      - OPENSESAME_ENABLE_GUARDRAILS=true
      - OPENSESAME_MAX_PROMPT_LENGTH=4096
      
      # AI Layer Configuration (Phase 2)
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      
      # Phase 3 ML Layer Configuration
      - OPENSESAME_ML_ENABLED=true
      - OPENSESAME_ML_K_VALUE=3
      - OPENSESAME_ML_BUFFER_SIZE=2
      
      # Performance Configuration (updated for ML)
      - OPENSESAME_WORKER_COUNT=1
      - OPENSESAME_MAX_CONCURRENT_REQUESTS=10
      - OPENSESAME_REQUEST_TIMEOUT_SECONDS=120
    volumes:
      # Persistent ML data storage (Phase 3 needs read/write access)
      - data_volume:/app/data
      # ML model cache storage
      - ml_cache_volume:/app/.cache
      # Optional: Mount logs directory
      - logs_volume:/app/logs
    networks:
      - opensesame_network
    depends_on:
      - redis
    restart: unless-stopped
    # Resource constraints (updated for Phase 3 ML Layer)
    deploy:
      resources:
        limits:
          cpus: '3.0'
          memory: 6G
        reservations:
          cpus: '2.0'
          memory: 3G
    # Health check (extended timeout for ML processing)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 180s

  # Redis for advanced caching (optional)
  redis:
    image: redis:7-alpine
    container_name: opensesame-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - opensesame_network
    restart: unless-stopped
    # Redis configuration (increased memory for ML caching)
    command: redis-server --appendonly yes --maxmemory 1024mb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Nginx reverse proxy for production (optional)
  nginx:
    image: nginx:alpine
    container_name: opensesame-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - opensesame_network
    depends_on:
      - opensesame-predictor
    restart: unless-stopped
    profiles:
      - production
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: opensesame-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - opensesame_network
    restart: unless-stopped
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Grafana for monitoring dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: opensesame-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - opensesame_network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    profiles:
      - monitoring
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

# Named volumes for data persistence
volumes:
  data_volume:
    driver: local
  ml_cache_volume:
    driver: local
  redis_data:
    driver: local
  logs_volume:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Custom network for service communication
networks:
  opensesame_network:
    driver: bridge

# Environment-specific overrides
# Development: docker-compose up
# Production: docker-compose --profile production up
# Monitoring: docker-compose --profile monitoring up